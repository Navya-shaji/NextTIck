<%- include("../../views/partials/user/header.ejs") %>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - NextTick</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .card {
            background-color: #fff;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #e0e0e0;
            padding: 15px 20px;
        }

        .card-body {
            padding: 20px;
        }

        .btn-primary {
            background-color: #030303;
            border-color: #007bff;
        }

        .btn-primary:hover {
            background-color: #030303;
            border-color: #0056b3;
        }

        .product-img {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
        }

        .address-item {
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .address-item.selected {
            border-color: #007bff;
            background-color: #f0f8ff;
        }

        .payment-method-card {
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .payment-method-card.selected {
            border-color: #007bff;
            background-color: #f0f8ff;
        }

        #couponCode {
            max-width: 200px;
        }

    .container {
        padding: 30px;
    }

    .card {
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        background-color: #070707;
        color: white;
        font-size: 18px;
        padding: 12px;
        font-weight: bold;
    }

    .card-body {
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .address-item {
        padding: 15px;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-bottom: 15px;
    }

    .address-item .d-flex {
        justify-content: space-between;
    }

    .address-item label {
        cursor: pointer;
    }

    .address-item .me-3 input {
        cursor: pointer;
    }

    .product-img {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 5px;
    }

    .coupon-item {
        background-color: #f0f0f0;
        padding: 12px;
        border-radius: 8px;
        margin-bottom: 15px;
    }

    .coupon-item .btn-outline-primary {
        font-size: 12px;
    }

    .payment-method-card {
        background-color: #ffffff;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 10px;
    }

    .payment-method-card input {
        cursor: pointer;
    }

    .payment-method-card label {
        cursor: pointer;
        font-size: 16px;
    }

    .order-summary-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
    }

    .btn-primary {
        background-color: #050505;
        color: white;
        font-weight: bold;
    }

    .btn-primary:hover {
        background-color: #333;
    }

    .form-control {
        border-radius: 5px;
    }

    .modal-dialog {
        max-width: 600px;
    }

    .modal-body input {
        border-radius: 5px;
    }

    .modal-header {
        background-color: #070707;
        color: white;
        font-weight: bold;
    }

    /* Responsive Styles */
    @media (max-width: 768px) {
        .row {
            flex-direction: column;
        }

        .col-lg-8,
        .col-lg-4 {
            width: 100%;
        }

        .order-summary-item {
            font-size: 14px;
        }
    }

    @media (max-width: 576px) {
        .coupon-item {
            font-size: 14px;
        }

        .payment-method-card {
            font-size: 14px;
        }
    }
    .btn-primary {
        background-color: #4c5058;  /* Light black button */
        border-color: #4c5058;
        color: white;
    }

    .btn-primary:hover {
        background-color: #3e4349;  /* Darker button hover effect */
        border-color: #3e4349;
    }
    
    </style>
</head>
<body>
    <div class="container py-5">
        <div class="row">
            <div class="col-lg-8 order-lg-1">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4 class="mb-0">Shipping Details</h4>
                    </div>
                    <div class="card-body">
                        <% if (addressData.address.length > 0) { %>
                            <div id="addressContainer">
                                <% addressData.address.forEach((addr, index) => { %>
                                    <div class="address-item mb-3">
                                        <div class="d-flex align-items-start">
                                            <div class="me-3">
                                                <input type="radio" name="selectedAddress" id="address<%= index %>" value="<%= addr._id %>" class="form-check-input" onchange="handleAddressSelection(this.value)">
                                            </div>
                                            <div class="flex-grow-1">
                                                <label for="address<%= index %>" class="d-block cursor-pointer">
                                                    <h5><%= addr.addressType %></h5>
                                                    <p class="mb-0">
                                                        <%= addr.name %><br>
                                                        <%= addr.city %>, <%= addr.state %> - <%= addr.pincode %><br>
                                                        Landmark: <%= addr.landMark %><br>
                                                        Phone: <%= addr.phone %>
                                                        <% if (addr.altPhone) { %>
                                                            <br>Alternate Phone: <%= addr.altPhone %>
                                                        <% } %>
                                                    </p>
                                                </label>
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <a href="/edit-address/<%=addr.id %>" class="btn btn-sm btn-primary">Edit</a>
                                                <a href="/delete-address/<%=addr.id %>" class="btn btn-sm btn-danger">Delete</a>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <p>No saved addresses found.</p>
                        <% } %>
                        <a href="/add-address">
                            <button class="btn btn-primary">
                                Add Address
                            </button>
                        </a>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h4 class="mb-0">Payment Method</h4>
                    </div>
                    <div class="card-body">
                        <div class="payment-method-card mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="payment" id="cod" value="COD" checked>
                                <label class="form-check-label" for="cod">
                                    <i class="fas fa-money-bill-wave me-2"></i>Cash On Delivery
                                </label>
                            </div>
                        </div>
                        <div class="payment-method-card mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="payment" id="razorpay" value="Razorpay">
                                <label class="form-check-label" for="razorpay">
                                    <i class="fas fa-credit-card me-2"></i>Razorpay
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4 mb-4 mb-lg-0 order-lg-2">
                <div class="card">
                    <div class="card-header">
                        <h4 class="mb-0">Order Summary</h4>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span>Subtotal</span>
                            <span>₹<%= subtotal %></span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span>Shipping</span>
                            <span>₹0.00</span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span>Discount</span>
                            <span id="discountAmount">₹0.00</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between align-items-center">
                            <strong>Total</strong>
                            <strong id="totalAmount">₹<%= subtotal %></strong>
                        </div>
                        <div class="mt-3">
                            <input type="text" id="couponCode" class="form-control mb-2" placeholder="Enter coupon code">
                            <button class="btn btn-outline-primary btn-sm" onclick="applyCoupon()">Apply Coupon</button>
                        </div>
                        <button class="btn btn-primary w-100 mt-4" onclick="placeOrder()">Place Order</button>
                    </div>
                </div>
                <div class="card mt-4">
                    <div class="card-header">
                        <h4 class="mb-0 d-flex justify-content-between align-items-center">
                            Available Coupons
                            <button class="btn btn-sm btn-outline-primary" data-bs-toggle="collapse" data-bs-target="#couponCollapse" aria-expanded="false" aria-controls="couponCollapse">
                                <i class="fas fa-chevron-down"></i>
                            </button>
                        </h4>
                    </div>
                    <div class="collapse" id="couponCollapse">
                        <div class="card-body">
                            <% availableCoupons.forEach(coupon => { %>
                                <div class="coupon-item mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong><%= coupon.name %></strong>
                                            <p class="mb-0"><%= coupon.type === 'percentage' ? `${coupon.offerPrice}% off` : `₹${coupon.offerPrice} off` %></p>
                                            <small>Min. Purchase: ₹<%= coupon.minimumPrice %></small>
                                            <small>Expires: <%= new Date(coupon.expireOn).toLocaleDateString() %></small>
                                        </div>
                                        <button class="btn btn-sm btn-outline-primary" onclick="copyCouponCode('<%= coupon.name %>')">Copy Code</button>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    </div>
                </div>
                
                <div class="card mt-4">
                    <div class="card-header">
                        <h4 class="mb-0">Your Items</h4>
                    </div>
                    <div class="card-body">
                        <% product.forEach((pro) => { %>
                            <div class="d-flex align-items-center mb-3">
                                <img src="/uploads/re-image/<%= pro.productImage[0] %>" alt="Product" class="product-img me-3">
                                <div>
                                    <h6 class="mb-0"><%= pro.productName %></h6>
                                    <small class="text-muted">Quantity: <%= pro.quantity %></small>
                                </div>
                                <div class="ms-auto">
                                    <span>₹<%= pro.salesPrice %></span>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                </div>

                
            </div>
        </div>
    </div>

    <!-- Address Form Modal -->
    <div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addressModalLabel">Add/Edit Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addressForm">
                        <input type="hidden" id="addressId">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="name" >
                        </div>
                        <div class="mb-3">
                            <label for="addressType" class="form-label">Address Type</label>
                            <input type="text" class="form-control" id="addressType" >
                        </div>
                        <div class="mb-3">
                            <label for="street" class="form-label">Street</label>
                            <input type="text" class="form-control" id="street" >
                        </div>
                        <div class="mb-3">
                            <label for="city" class="form-label">City</label>
                            <input type="text" class="form-control" id="city" >
                        </div>
                        <div class="mb-3">
                            <label for="state" class="form-label">State</label>
                            <input type="text" class="form-control" id="state" >
                        </div>
                        <div class="mb-3">
                            <label for="pincode" class="form-label">Pincode</label>
                            <input type="text" class="form-control" id="pincode" >
                        </div>
                        <div class="mb-3">
                            <label for="landmark" class="form-label">Landmark</label>
                            <input type="text" class="form-control" id="landmark">
                        </div>
                        <div class="mb-3">
                            <label for="phone" class="form-label">Phone</label>
                            <input type="tel" class="form-control" id="phone" >
                        </div>
                        <div class="mb-3">
                            <label for="altPhone" class="form-label">Alternate Phone</label>
                            <input type="tel" class="form-control" id="altPhone">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveAddress()">Save Address</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>


function copyCouponCode(couponCode) {
    // Create a temporary text area element to hold the coupon code
    const tempInput = document.createElement('input');
    document.body.appendChild(tempInput);
    tempInput.value = couponCode;  // Set the coupon code to the temporary input field
    tempInput.select();  // Select the text in the input field
    document.execCommand('copy');  // Copy the selected text to the clipboard
    document.body.removeChild(tempInput);  // Remove the temporary input field

    // Show SweetAlert to notify the user that the coupon code has been copied
    Swal.fire({
        icon: 'success',
        title: 'Coupon Code Copied!',
        text: `"${couponCode}" has been copied to your clipboard.`,
        confirmButtonText: 'OK'
    });
}


        let selectedAddressId = null;
        let subtotal = `<%= subtotal %>`;
        
        function handleAddressSelection(addressId) {
            selectedAddressId = addressId;
            document.querySelectorAll('.address-item').forEach(item => {
                item.classList.remove('selected');
            });
            document.querySelector(`input[value="${addressId}"]`).closest('.address-item').classList.add('selected');
        }
        
        function showAddAddressForm() {
            document.getElementById('addressForm').reset();
            document.getElementById('addressId').value = '';
            document.getElementById('addressModalLabel').textContent = 'Add New Address';
            new bootstrap.Modal(document.getElementById('addressModal')).show();
        }
        
        function editAddress(addressId) {
            fetch(`/address/${addressId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('addressId').value = data._id;
                    document.getElementById('name').value = data.name;
                    document.getElementById('addressType').value = data.addressType;
                    document.getElementById('street').value = data.street;
                    document.getElementById('city').value = data.city;
                    document.getElementById('state').value = data.state;
                    document.getElementById('pincode').value = data.pincode;
                    document.getElementById('landmark').value = data.landmark || '';
                    document.getElementById('phone').value = data.phone;
                    document.getElementById('altPhone').value = data.altPhone || '';
                    document.getElementById('addressModalLabel').textContent = 'Edit Address';
                    new bootstrap.Modal(document.getElementById('addressModal')).show();
                })
                .catch(error => {
                    console.error('Error fetching address details:', error);
                    Swal.fire('Error', 'Failed to fetch address details', 'error');
                });
        }
        
        function saveAddress() {
            const addressData = {
                _id: document.getElementById('addressId').value,
                name: document.getElementById('name').value,
                addressType: document.getElementById('addressType').value,
                street: document.getElementById('street').value,
                city: document.getElementById('city').value,
                state: document.getElementById('state').value,
                pincode: document.getElementById('pincode').value,
                landmark: document.getElementById('landmark').value,
                phone: document.getElementById('phone').value,
                altPhone: document.getElementById('altPhone').value
            };

            fetch('/address', {
                method: addressData._id ? 'PUT' : 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(addressData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Success', 'Address saved successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('addressModal')).hide();
                    location.reload();
                } else {
                    Swal.fire('Error', data.message || 'Failed to save address', 'error');
                }
            })
            .catch(error => {
                console.error('Error saving address:', error);
                Swal.fire('Error', 'Failed to save address', 'error');
            });
        }

        function deleteAddress(addressId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/address/${addressId}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Deleted!', 'Your address has been deleted.', 'success');
                            location.reload();
                        } else {
                            Swal.fire('Error', data.message || 'Failed to delete address', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting address:', error);
                        Swal.fire('Error', 'Failed to delete address', 'error');
                    });
                }
            });
        }

        function applyCoupon() {
            const couponCode = document.getElementById('couponCode').value;
            const totalAmountElement = document.getElementById("totalAmount");
            const totalAmount = totalAmountElement.textContent.replace(/[₹\s]/g, "");
            const discounttElement = document.getElementById("discountAmount");
            fetch('/apply-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ couponCode, totalAmount })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    discounttElement.textContent=data.discount
                    totalAmountElement.textContent = data.totalAmount
                    // updateOrderSummary();
                    Swal.fire('Success', 'Coupon applied successfully', 'success');
                } else {
                    Swal.fire('Error', data.message || 'Failed to apply coupon', 'error');
                }
            })
            .catch(error => {
                console.error('Error applying coupon:', error);
                Swal.fire('Error', 'Failed to apply coupon', 'error');
            });
        }

        function updateOrderSummary() {
            const discountAmount = document.getElementById('discountAmount');
            const totalAmount = document.getElementById('totalAmount');
            discountAmount.textContent = `₹${discount.toFixed(2)}`;
            const total = subtotal - discount;
            totalAmount.textContent = `₹${total.toFixed(2)}`;
             discount = document.getElementById("discountAmount").textContent;
        }
        function placeOrder() {
            if (!selectedAddressId) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select a delivery address'
                });
                return;
            }

            const totalAmount = parseFloat(document.getElementById('totalAmount').textContent.replace('₹', ''));
            const paymentMethod = selectedPaymentMethod();

            if (paymentMethod === 'COD' && totalAmount > 1000) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'COD is not available for orders above Rs 1000'
                });
                return;
            }

            Swal.fire({
                title: 'Place Order',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'Confirm your order'
            }).then((result) => {
                if (result.isConfirmed) {
                    if (paymentMethod === 'COD') {
                        placeOrderCOD();
                    } else if (paymentMethod === 'Razorpay') {
                        placeOrderRazorpay();
                    }
                }
            });
        }

        function placeOrderCOD() {
            const discountString = document.getElementById("discountAmount").textContent.replace(/₹/g, "").trim();
            const discount = parseFloat(discountString, 10);
            const shippingCost = parseFloat(document.getElementById("shippingCost").textContent.replace(/₹/g, "").trim());

            fetch('/checkout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    address: selectedAddressId,
                    products: `<%- JSON.stringify(product) %>`,
                    subtotal: subtotal,
                    total: subtotal - discount + shippingCost,
                    paymentMethod: 'COD'
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Order Placed Successfully!',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.href = '/orderConfirmation';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to place order'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to place order'
                });
            });
        }

  function placeOrderRazorpay() {
    const discountString = document.getElementById("discountAmount").textContent.replace(/₹/g, "").trim();
    const discount = parseFloat(discountString,10);
    fetch('/checkout', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            address: selectedAddressId,
            products: `<%- JSON.stringify(product) %>`,
            subtotal: subtotal,
            total: subtotal - discount,
            paymentMethod: 'online'
        })
    })
    .then(response => response.json())
    .then(data => {
        if (!data.success) {
            throw new Error(data.message || 'Failed to create order');
        }

        const options = {
            key: data.key_id, 
            amount: data.amount,
            currency: data.currency,
            name: data.name,
            description: data.description,
            order_id: data.order_id,
            handler: function (response) {
                verifyRazorpayPayment(response, {
                    address: selectedAddressId,
                    products: `<%- JSON.stringify(product) %>`,
                    subtotal: subtotal,
                    total: subtotal - discount
                });
            },
            prefill: data.prefill,
            theme: {
                color: '#3399cc'
            }
        };

        const rzp = new Razorpay(options);
        rzp.on('payment.failed', function (response) {
            Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: response.error.description
            });
        });

        rzp.open();
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to initiate payment'
        });
    });
}
    
function verifyRazorpayPayment(response, orderDetails) {
    const discountString = document.getElementById("discountAmount").textContent.replace(/₹/g, "").trim();
    const discount = parseFloat(discountString,10);
    fetch('/verify-payment', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            razorpay_payment_id: response.razorpay_payment_id,
            razorpay_order_id: response.razorpay_order_id,
            razorpay_signature: response.razorpay_signature,
            orderDetails: orderDetails
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Payment Successful!',
                text: 'Your order has been placed successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.href = `/orderConfirmation`;
            });
        } else {
            throw new Error(data.message || 'Payment verification failed ');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Payment Verification Failed ',
            text: error.message || 'Failed to verify payment'
        });
    });
}
     
        function handleAddressSelection(addressId) {
            selectedAddressId = addressId;
            document.querySelectorAll('.address-item').forEach(item => {
                item.classList.remove('selected');
            });
            document.querySelector(`input[value="${addressId}"]`).closest('.address-item').classList.add('selected');
            
            // Calculate and update shipping cost
            updateShippingCost(addressId);
        }

        function updateShippingCost(addressId) {
           
            const shippingCost = 50; 
            document.getElementById('shippingCost').textContent = `₹${shippingCost.toFixed(2)}`;
            updateTotalAmount();
        }

        function updateTotalAmount() {
            const subtotal = parseFloat('<%= subtotal %>');
            const discount = parseFloat(document.getElementById('discountAmount').textContent.replace('₹', '')) || 0;
            const shippingCost = parseFloat(document.getElementById('shippingCost').textContent.replace('₹', '')) || 0;
            const total = subtotal - discount + shippingCost;
            document.getElementById('totalAmount').textContent = `₹${total.toFixed(2)}`;
        }
        function selectedPaymentMethod() {
            const selectedMethod = document.querySelector('input[name="payment"]:checked');
            return selectedMethod ? selectedMethod.value : 'COD';
        }
    </script>
</body>
</html>