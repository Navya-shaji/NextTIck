<%- include("../../views/partials/user/header.ejs") %>
<head>
  <link rel="stylesheet" href="/styles/profile.css">
</head>
<main class="main">
 <div class="page-header breadcrumb-wrap mb-3">
   <div class="container">
     <div class="breadcrumb">
       <a href="#" rel="nofollow">Home</a>
       <span></span> Profile <span></span> Account
     </div>
   </div>
 </div>
  <section class="pt-10 pb-10">
   <div class="container">
     <div class="row">
       <div class="col-lg-10 m-auto">
         <div class="row">
           <div class="col-md-4">
             <div class="dashboard-menu">
               <ul class="nav flex-column" role="tablist">
                 <li class="nav-item">
                   <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="false">
                     <i class="fi-rs-settings-sliders mr-10"></i>Dashboard
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="false">
                     <i class="fi-rs-marker mr-10"></i>My Address
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="false">
                     <i class="fi-rs-shopping-bag mr-10"></i>Orders
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#track-orders" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet Status
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#wallet-history" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet History
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#referal" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Referals
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" href="/logout">
                     <i class="fi-rs-sign-out mr-10"></i>Logout
                   </a>
                 </li>
               </ul>
             </div>
           </div>
           <div class="col-md-8">
             <div class="tab-content dashboard-content">

               <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                 <div class="card card-green">
                   <div class="card-header">
                     <h5 class="mb-0 text-center">User Profile</h5>
                   </div>
                   <div class="card-body text-center">
                     <h5 class="card-title"></h5>
                     <p class="card-text">
                       <strong>Phone: <%=user.phone %></strong>
                     </p>
                     <p class="card-text">
                       <strong>Email: <%=user.email%></strong>
                     </p>
                     <a href="change-email" class="btn btn-sm btn-success ml-2">Change Email</a>
                     <a href="/change-password" class="btn btn-sm btn-success">Change Password</a>
                   </div>
                 </div>
               </div>

               <div class="tab-pane fade" id="address" role="tabpanel" aria-labelledby="address-tab">
                <div class="row">
                    <% if (userAddress && userAddress.address) { %>
                        <% userAddress.address.forEach((address) => { %>
                            <div class="col-lg-6">
                                <div class="card mb-3 mb-lg-0">
                                    <div class="card-header">
                                        <h5 class="mb-0"><%=address.addressType %></h5>
                                    </div>
                                    <div class="card-body">
                                        <address>
                                            <strong><%=address.name %></strong><br />
                                            <%=address.city %><br />
                                            <%=address.landmark %><br />
                                            <%=address.state %><br />
                                        </address>
                                        <p><strong>Pincode:</strong> <%=address.pincode %></p>
                                        <p><strong>Phone:</strong> <%=address.phone %></p>
                                        <p><strong>Alt Phone:</strong> <%=address.altPhone %></p>
                                        <div class="d-flex justify-content-between">
                                          <a href="/edit-address/<%=address.id %>" class="btn btn-sm btn-primary">Edit</a>
                                          <a href="/delete-address/<%=address.id %>" class="btn btn-sm btn-danger">Delete</a>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="col-lg-6">
                            <div class="card mb-3 mb-lg-0">
                                <div class="card-header">
                                    <h5 class="mb-0">No Address</h5>
                                </div>
                                <div class="card-body">
                                    <p>No address available. Please add one.</p>
                                </div>
                            </div>
                        </div>
                    <% } %>
                </div>
                <div class="mt-3 text-center">
                    <a href="/add-address">
                        <button class="btn btn-primary">
                            Add Address
                        </button>
                    </a>
                </div>
            </div>

          <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Your Orders</h5>
                   </div>
                   <div class="card-body">
                     <div class="table-responsive">
                       <table class="table">
                         <thead>
                           <tr>
                             <th>Order</th>
                             <th>Date</th>
                             <th>Status</th>
                             <th>Total</th>
                             <th>Actions</th>
                           </tr>
                         </thead>
                         <tbody>
                           <% if (typeof orders !== 'undefined' && orders && orders.length > 0) { %>
                             <% orders.forEach(order => { %>
                               <tr>
                                 <td>#<%= order.orderId %></td>
                                 <td><%= new Date(order.createdOn).toLocaleDateString() %></td>
                                 <td><%= order.status %></td>
                                 <td>â‚¹<%= order.finalAmount ? order.finalAmount.toFixed(2) : '0.00' %></td>
                                 <td>
                                  <form action="/orders/view/<%= order._id %>" method="GET" class="d-inline">
                                   <button type="submit" class="btn-small btn-info d-block w-100">
                                     View
                                   </button>
                                 </form>
                                 </td>
                                 <td>
                                 
 
                                  <!-- Example for cancel button  -->
                              
                                  
                                  <td>
                                    <% if(order.status === 'Pending') { %>
                                      <button 
                                        type="button" 
                                        class="btn btn-danger cancel-order-btn" 
                                        data-order-id="<%= order._id %>"
                                        >
                                        Cancel Order
                                      </button>
                                    <% } %>
                                  </td>
                                <td>
                                  

<!-- Example for return button -->
<% if(order.status === 'Delivered') { %>
  <button 
    type="button" 
    class="btn btn-warning return-order-btn" 
    data-order-id="<%= order._id %>">
    Return Order
  </button>
<% } %>

              
                       </tr>
                             <% }); %>
                           <% } else { %>
                             <tr>
                               <td colspan="5" class="text-center">No orders found.</td>
                             </tr>
                           <% } %>
                         </tbody>
                       </table>
                     </div>
                   </div>
                 </div>
               </div>

               <div class="tab-pane fade" id="wallet-history" role="tabpanel" aria-labelledby="wallet-history-tab">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Wallet History</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Date </th>
                                        <th>Type</th>
                                        <th>Status</th>
                                        <th>Amount</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% if (wallet && wallet.transactions && wallet.transactions.length > 0) { %>
                                        <% wallet.transactions
                                            .sort((a, b) => new Date(b.date) - new Date(a.date))
                                            .forEach(transaction => { %>
                                            <tr>
                                                <td><%= new Date(transaction.date).toLocaleDateString() %></td>
                                                <td>
                                                    <span class="badge <%= transaction.type === 'Deposit' ? 'bg-success' : 
                                                                          transaction.type === 'Refund' ? 'bg-info' : 
                                                                          'bg-danger' %>">
                                                        <%= transaction.type.toUpperCase() %>
                                                    </span>
                                                </td>
                                                <td><%= transaction.description || 'Wallet Transaction' %></td>
                                                <td class="<%= transaction.type === 'Withdrawal' || transaction.type === 'Purchase' ? 'text-danger' : 'text-success' %>">
                                                    <%= transaction.type === 'Withdrawal' || transaction.type === 'Purchase' ? '-' : '+' %>â‚¹<%= transaction.amount %>
                                                </td>
                                            </tr>
                                        <% }) %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="4" class="text-center">No transactions found.</td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
            
              
              <div class="tab-pane fade" id="track-orders" role="tabpanel" aria-labelledby="track-orders-tab">
                <div class="card">
                  <div class="card-header">
                    <h5 class="mb-0">Wallet</h5>
                  </div>
                  <div class="card-body contact-from-area">
                    <div class="row">
                      <div class="col-lg-8 mx-auto text-center mt-90">
                        <form>
                          <div class="form-group">
                            <label for="walletAmount" class="h4">Amount</label>
                            <input type="number" id="walletAmount" class="form-control" placeholder="Enter amount to add" />
                          </div>
                          <button type="button" class="btn btn-success" id="addMoneyBtn" >Add Money</button>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>
              </div>


               <div class="tab-pane fade" id="referal" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Referal</h5>
                   </div>
                   <div class="card-body">
                     <h6 class="mb-3">Refer your friends and earn money!</h6>
                     <p>Share this link: <strong></strong></p>
                     <p>Earned: â‚¹</p>
                   </div>
                 </div>
               </div>
             </div>
           </div>
         </div>
       </div>
     </div>
   </div>
 </section>
</main>
<%- include("../../views/partials/user/footer.ejs") %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<!-- SweetAlert Script -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.14/dist/sweetalert2.all.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Add event listeners to all cancel buttons
    document.querySelectorAll('.cancel-order-btn').forEach(button => {
        button.addEventListener('click', function () {
            const orderId = this.getAttribute('data-order-id');
            cancelOrder(orderId);
            console.log(orderId)
        });
    });
});

// function cancelOrder(orderId) {
//     Swal.fire({
//         title: "Are you sure?",
//         text: "Do you want to cancel this order?",
//         icon: "warning",
//         showCancelButton: true,
//         confirmButtonColor: "#d33",
//         cancelButtonColor: "#3085d6",
//         confirmButtonText: "Yes, cancel it!"
//     }).then((result) => {
//         if (result.isConfirmed) {
//             fetch('/orders/update-status', {
//                 method: 'POST',
//                 headers: {
//                     'Content-Type': 'application/json'
//                 },
//                 body: JSON.stringify({
//                     orderId: orderId,
//                     status: "Cancelled"
//                 })
//             })
//             .then(response => response.json())
//             .then(data => {
//                 if (data.success) {
//                     Swal.fire({
//                         title: "Cancelled!",
//                         text: data.message || "Order has been cancelled successfully.",
//                         icon: "success",
//                         timer: 1500,
//                         showConfirmButton: false
//                     }).then(() => {
//                         location.reload(); 
//                     });
//                 } else {
                   
//                     Swal.fire({
//                         title: "Error",
//                         text: data.message || "Failed to cancel the order.",
//                         icon: "error"
//                     });
//                 }
//             })
//             .catch(error => {
//                 console.error("Error:", error);
//                 Swal.fire({
//                     title: "Error",
//                     text: "An error occurred while cancelling the order.",
//                     icon: "error"
//                 });
//             });
//         }
//     });
// }


//.......................................................................................................
function cancelOrder(orderId, orderAmount) {
    Swal.fire({
        title: "Are you sure?",
        text: "Do you want to cancel this order?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, cancel it!"
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/orders/cancel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    orderId: orderId,
                    status: "Cancelled"
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Call function to refund money to wallet
                    // refundToWallet(orderAmount);
                    
                    Swal.fire({
                        title: "Cancelled!",
                        text: data.message || "Order has been cancelled successfully.",
                        icon: "success",
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => {
                        location.reload(); 
                    });
                } else {
                    Swal.fire({
                        title: "Error",
                        text: data.message || "Failed to cancel the order.",
                        icon: "error"
                    });
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire({
                    title: "Error",
                    text: "An error occurred while cancelling the order.",
                    icon: "error"
                });
            });
        }
    });
}

// function refundToWallet(amount) {
//     fetch('/wallet/refund', {
//         method: 'POST',
//         headers: {
//             'Content-Type': 'application/json'
//         },
//         body: JSON.stringify({
//             amount: amount
//         })
//     })
//     .then(response => response.json())
//     .then(data => {
//         if (data.success) {
//             Swal.fire({
//                 title: "Refunded!",
//                 text: `â‚¹${amount} has been added to your wallet.`,
//                 icon: "success",
//                 timer: 1500,
//                 showConfirmButton: false
//             });
//         } else {
//             Swal.fire({
//                 title: "Error",
//                 text: data.message || "Failed to refund money to wallet.",
//                 icon: "error"
//             });
//         }
//     })
//     .catch(error => {
//         console.error("Error:", error);
//         Swal.fire({
//             title: "Error",
//             text: "An error occurred while refunding money to the wallet.",
//             icon: "error"
//         });
//     });
// }
// //......................................................................................

document.addEventListener('DOMContentLoaded', () => {

  document.querySelectorAll('.return-order-btn').forEach(button => {
        button.addEventListener('click', function () {
            const orderId = this.getAttribute('data-order-id');
            redirectToReturnReason(orderId); 
        });
    });
});

function redirectToReturnReason(orderId) {
    Swal.fire({
        title: "Are you sure?",
        text: "Do you want to proceed to return this order?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, proceed!"
    }).then((result) => {
        if (result.isConfirmed) {

          window.location.href = `/return-reason?orderId=${orderId}`;

        }
    });
}

  document.getElementById('addMoneyBtn').addEventListener('click', async () => {
    try {
      // Define the amount and user ID (from your frontend logic)
      const amount = 500; // Amount in INR
      const userId = 'exampleUserId123'; // Replace with actual user ID

      // Send a request to your server to create a Razorpay order
      const response = await fetch('/createRazorpayOrder', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ amount, userId }),
      });

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.message || 'Failed to create Razorpay order');
      }

      const { order } = data;

      // Open Razorpay Checkout with the order details
      const options = {
        key: 'YOUR_RAZORPAY_KEY', // Replace with your Razorpay API key
        amount: order.amount, // Amount in paisa (e.g., 500 INR = 50000 paisa)
        currency: 'INR',
        name: 'Your App Name',
        description: 'Add Money to Wallet',
        image: 'https://your-logo-url.com/logo.png',
        order_id: order.id, // Razorpay order ID
        handler: async function (response) {
          try {
            // Send payment success data to backend to update wallet
            const paymentData = {
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature,
              userId: 'exampleUserId123', // Replace with actual user ID
            };

            const result = await fetch('/updateWalletAfterPayment', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(paymentData),
            });

            const data = await result.json();
            if (data.success) {
              alert('Wallet updated successfully!');
              location.reload(); // Refresh to show updated wallet history
            } else {
              alert('Failed to update wallet: ' + data.message);
            }
          } catch (error) {
            console.error('Error updating wallet:', error);
            alert('An error occurred. Please contact support.');
          }
        },
        prefill: {
          name: 'Customer Name', // Replace with the customer's name
          email: 'customer@example.com', // Replace with the customer's email
          contact: '9876543210', // Replace with the customer's phone number
        },
        theme: {
          color: '#3399cc',
        },
      };

      const rzp = new Razorpay(options);
      rzp.open();
    } catch (error) {
      console.error('Error during payment:', error);
      alert('Failed to initiate payment. Please try again.');
    }
  });
  </script>
