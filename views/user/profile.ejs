<%- include("../../views/partials/user/header.ejs") %>
<head>
  <link rel="stylesheet" href="/styles/profile.css">
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <style>
    .main {
      background-color: #f8f9fa;
      min-height: 100vh;
      padding: 2rem 0;
    }
    .card {
      border: none;
      box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
      margin-bottom: 1.5rem;
      border-radius: 0.5rem;
    }
    .nav-link {
      color: #495057;
      transition: all 0.3s ease;
    }
    .nav-link:hover, .nav-link.active {
      color: white;
    }
    .btn-primary {
      background-color: #000;
      border-color: #000;
    }
    .btn-primary:hover {
      background-color: #333;
      border-color: #333;
    }
    .table-container {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      margin-bottom: 1rem;
    }
    .table {
      table-layout: fixed;
      margin-bottom: 0;
      width: 100%;
      font-size: 0.6rem;
    }
    .table thead th {
      border-top: none;
      border-bottom: 1px solid #dee2e6;
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.55rem;
      padding: 4px 2px;
      color: #495057;
      background-color: #f8f9fa;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .table td {
      padding: 4px 2px;
      border-bottom: 1px solid #dee2e6;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      font-size: 0.6rem;
      line-height: 1;
    }
    .table tr:last-child td {
      border-bottom: none;
    }
    .order-id-cell {
      width: 50px;
    }
    .date-cell {
      width: 65px;
    }
    .status-cell {
      width: 60px;
    }
    .amount-cell {
      width: 55px;
    }
    .payment-status-cell {
      width: 60px;
    }
    .actions-cell {
      width: 55px;
      padding: 1px !important;
    }
    .btn-action {
      padding: 0px 1px;
      font-size: 0.5rem;
      margin-bottom: 1px;
      min-height: 14px;
      width: 100%;
      text-align: center;
      border-radius: 2px;
      line-height: 1;
    }
    .btn-action:last-child {
      margin-bottom: 0;
    }
    @media (min-width: 768px) {
      .table {
        font-size: 0.65rem;
      }
      .table thead th {
        font-size: 0.6rem;
        padding: 6px 4px;
      }
      .table td {
        padding: 4px;
        font-size: 0.65rem;
      }
      .btn-action {
        padding: 1px 2px;
        font-size: 0.55rem;
        min-height: 16px;
      }
    }
    .pagination {
      display: flex;
      justify-content: center;
      gap: 5px;
      margin-top: 1.5rem;
    }
    .pagination .page-item .page-link {
      border: 1px solid #dee2e6;
      padding: 8px 16px;
      color: #000;
      background-color: #fff;
      transition: all 0.3s ease;
    }
    .pagination .page-item.active .page-link {
      background-color: #000;
      border-color: #000;
      color: #fff;
    }
    .pagination .page-item .page-link:hover {
      background-color: #f8f9fa;
      border-color: #000;
      color: #000;
    }
    .pagination .page-item.disabled .page-link {
      background-color: #f8f9fa;
      border-color: #dee2e6;
      color: #6c757d;
      pointer-events: none;
    }
    .modal-content {
      border-radius: 0.5rem;
      border: none;
    }
    .modal-header {
      background-color: #f8f9fa;
      border-radius: 0.5rem 0.5rem 0 0;
    }
    .address-card:hover {
      transform: translateY(-2px);
      transition: all 0.3s ease;
    }
    .wallet-balance {
      font-size: 1.5rem;
      font-weight: bold;
      color: #000;
    }
    /* Action Button Styles */
    .btn-view {
      background-color: #000;
      color: white;
    }
    .btn-view:hover {
      background-color: #333;
      color: white;
      transform: translateY(-1px);
    }
    .btn-cancel {
      background-color: #dc3545;
      color: white;
    }
    .btn-cancel:hover {
      background-color: #c82333;
      color: white;
      transform: translateY(-1px);
    }
    .btn-retry {
      background-color: #28a745;
      color: white;
    }
    .btn-retry:hover {
      background-color: #218838;
      color: white;
      transform: translateY(-1px);
    }
    .btn-return {
      background-color: #EA1A85;
      color: white;
    }
    .btn-return:hover {
      background-color: #d1177a;
      color: white;
      transform: translateY(-1px);
    }
  </style>
</head>

<main class="main">
  <div class="container py-5">
    <div class="row">
      <div class="col-lg-3">
        <!-- Sidebar -->
        <div class="card mb-4">
          <div class="card-body">
            <div class="d-flex flex-column align-items-center text-center">
              <img src="https://bootdey.com/img/Content/avatar/avatar7.png" alt="User Avatar" class="rounded-circle" width="150">
              <div class="mt-3">
                <h4><%= user.name %></h4>
                <p class="text-muted font-size-sm"><%= user.email %></p>
              </div>
            </div>
            <hr class="my-4">
            <ul class="list-group list-group-flush">
              <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                <h6 class="mb-0">Wallet Balance</h6>
                <span class="text-secondary">â‚¹<%= wallet.totalBalance.toFixed(2) %></span>
              </li>
            </ul>
          </div>
        </div>
        
        <!-- Navigation -->
        <div class="card">
          <div class="card-body">
            <nav class="nav flex-column nav-pills">
              <a class="nav-link active" id="dashboard-tab" data-bs-toggle="pill" href="#dashboard">Dashboard</a>
              <a class="nav-link" id="orders-tab" data-bs-toggle="pill" href="#orders">Orders</a>
              <a class="nav-link" id="address-tab" data-bs-toggle="pill" href="#address">Addresses</a>
              <a class="nav-link" id="wallet-history-tab" data-bs-toggle="pill" href="#wallet-history">Wallet History</a>
              <a class="nav-link" id="logout" href="/logout">Logout</a>
            </nav>
          </div>
        </div>
      </div>
      
      <div class="col-lg-9">
        <div class="card">
          <div class="card-body">
            <div class="tab-content">
              <!-- Dashboard Tab -->
              <div class="tab-pane fade show active" id="dashboard" role="tabpanel">
                <h3 class="mb-4">Profile Information</h3>
                <form id="updateProfileForm">
                  <div class="mb-3">
                    <label for="name" class="form-label"><strong>Name:</strong></label>
                    <input type="text" id="name" name="name" class="form-control" value="<%= user.name %>" required>
                  </div>
                  <div class="mb-3">
                    <label for="phone" class="form-label"><strong>Phone:</strong></label>
                    <input type="text" id="phone" name="phone" class="form-control" value="<%= user.phone %>" required>
                  </div>
                  <div class="mb-3">
                    <label for="email" class="form-label"><strong>Email:</strong></label>
                    <input type="email" id="email" name="email" class="form-control" value="<%= user.email %>" readonly>
                  </div>
                
                  
                  <div>
                  <a href="/change-password" class="btn btn-sm" style="background-color: black; color: white; padding: 8px 12px; text-decoration: none; border-radius: 5px; font-size: 14px; border: 1px solid white;">
                    Change Password
                  </a>
                  <button type="submit" class="btn btn-primary"  style="background-color: black; color: white; padding: 8px 12px; text-decoration: none; border-radius: 5px; font-size: 14px; border: 1px solid white;">
                    Save Changes
                  </button>
                </div>
                
                
                  <div>
                    
                  </div>
                </form>
              </div>
              
              <!-- Orders Tab -->
              <div class="tab-pane fade" id="orders" role="tabpanel">
                <h3 class="mb-4">Your Orders</h3>
                <div class="table-container">
                  <div class="table-responsive">
                    <table class="table">
                      <thead>
                        <tr>
                          <th class="order-id-cell">ID</th>
                          <th class="date-cell">Date</th>
                          <th class="status-cell">Status</th>
                          <th class="amount-cell">Total</th>
                          <th class="payment-status-cell">Pay</th>
                          <th class="actions-cell">Act</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% if (typeof orders !== 'undefined' && orders && orders.length > 0) { %>
                          <% orders.forEach(order => { %>
                            <tr>
                              <td class="order-id-cell">#<%= order.orderId %></td>
                              <td class="date-cell"><%= new Date(order.createdOn).toLocaleDateString() %></td>
                              <td class="status-cell">
                                <span class="status-badge <%= order.status.toLowerCase() === 'pending' ? 'status-pending' : 
                                                           order.status.toLowerCase() === 'delivered' ? 'status-delivered' : 
                                                           'status-cancelled' %>">
                                  <%= order.status %>
                                </span>
                              </td>
                              <td class="amount-cell">
                                <span class="amount-text">â‚¹<%= order.finalAmount ? order.finalAmount.toFixed(2) : '0.00' %></span>
                              </td>
                              <td class="payment-status-cell">
                                <span class="status-badge <%= order.paymentStatus.toLowerCase() === 'pending' ? 'status-pending' : 
                                                           order.paymentStatus.toLowerCase() === 'paid' ? 'status-delivered' : 
                                                           'status-cancelled' %>">
                                  <%= order.paymentStatus %>
                                </span>
                              </td>
                              <td class="actions-cell">
                                <div class="d-flex flex-column" style="gap: 1px;">
                                  <form action="/orders/view/<%= order._id %>" method="GET">
                                    <button type="submit" class="btn btn-action btn-view">View</button>
                                  </form>
                                  <% if (order.status === 'Pending') { %>
                                    <button type="button" class="btn btn-action btn-cancel cancel-order-btn" onclick="cancelOrder('<%= order._id %>')" >
                                      Cancel
                                    </button>
                                  <% } %>
                                  <% if (order.status === 'Delivered') { %>
                                    <button type="button" class="btn btn-action btn-return return-order-btn" onclick="redirectToReturnReason('<%= order._id %>')" >
                                      Return
                                    </button>
                                  <% } %>
                                  <% if (order.paymentStatus === 'Pending') { %>
                                    <button type="button" class="btn btn-action btn-retry" onclick="retryPayment('<%= order._id %>')" >
                                      Retry
                                    </button>
                                  <% } %>
                                </div>
                              </td>
                            </tr>
                          <% }); %>
                        <% } else { %>
                          <tr>
                            <td colspan="6" class="text-center">No orders found.</td>
                          </tr>
                        <% } %>
                      </tbody>
                    </table>
                  </div>
                </div>
                <nav aria-label="Orders pagination" class="mt-3">
                  <ul class="pagination">
                    <% if (typeof currentPage !== 'undefined' && typeof totalPages !== 'undefined') { %>
                      <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                        <a class="page-link" href="?page=<%= currentPage - 1 %>" <%= currentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : '' %>>Previous</a>
                      </li>
                      
                      <% for(let i = 1; i <= totalPages; i++) { %>
                        <% if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) { %>
                          <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                          </li>
                        <% } else if (i === currentPage - 2 || i === currentPage + 2) { %>
                          <li class="page-item disabled">
                            <span class="page-link">...</span>
                            
                          </li>
                        <% } %>
                      <% } %>
                      
                      <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                        <a class="page-link" href="?page=<%= currentPage + 1 %>" <%= currentPage === totalPages ? 'tabindex="-1" aria-disabled="true"' : '' %>>Next</a>
                      </li>
                    <% } %>
                  </ul>
                </nav>
              </div>
              
              <!-- Address Tab -->
              <div class="tab-pane fade" id="address" role="tabpanel">
                <h3 class="mb-4">Your Addresses</h3>
                <div class="row">
                  <% if (userAddress && userAddress.address) { %>
                    <% userAddress.address.forEach((address) => { %>
                      <div class="col-md-6 mb-3">
                        <div class="card">
                          <div class="card-header">
                            <h5 class="mb-0"><%= address.addressType %></h5>
                          </div>
                          <div class="card-body">
                            <address>
                              <strong><%= address.name %></strong><br />
                              <%= address.city %><br />
                              <%= address.landmark %><br />
                              <%= address.state %><br />
                            </address>
                            <p><strong>Pincode:</strong> <%= address.pincode %></p>
                            <p><strong>Phone:</strong> <%= address.phone %></p>
                            <p><strong>Alt Phone:</strong> <%= address.altPhone %></p>
                            <div class="d-flex justify-content-between">
                              <a href="/edit-address/<%= address.id %>" class="btn btn-primary btn-sm">Edit</a>
                              <a href="/delete-address/<%= address.id %>" class="btn btn-danger btn-sm">Delete</a>
                            </div>
                          </div>
                        </div>
                      </div>
                    <% }) %>
                  <% } else { %>
                    <div class="col-12">
                      <p>No addresses available. Please add one.</p>
                    </div>
                  <% } %>
                </div>
                <div class="mt-3">
                  <a href="/add-address" class="btn btn-primary">Add New Address</a>
                </div>
              </div>
              
              <!-- Wallet History Tab -->
              <div class="tab-pane fade" id="wallet-history" role="tabpanel">
                <h3 class="mb-4">Wallet Transactions</h3>
                <div class="table-container">
                  <div class="table-responsive">
                    <table class="table">
                      <thead>
                        <tr>
                          <th>Date</th>
                          <th>Type</th>
                          <th>Description</th>
                          <th>Amount</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% if (wallet && wallet.transactions && wallet.transactions.length > 0) { %>
                          <% wallet.transactions.sort((a, b) => new Date(b.date) - new Date(a.date)).forEach(transaction => { %>
                            <tr>
                              <td><%= new Date(transaction.date).toLocaleDateString() %></td>
                              <td>
                                <span class="badge <%= transaction.type === 'Deposit' ? 'bg-success' : 
                                                    transaction.type === 'Refund' ? 'bg-info' : 
                                                    'bg-danger' %>">
                                  <%= transaction.type.toUpperCase() %>
                                </span>
                              </td>
                              <td><%= transaction.description || 'Wallet Transaction' %></td>
                              <td class="<%= transaction.type === 'Withdrawal' || transaction.type === 'Purchase' ? 'text-danger' : 'text-success' %>">
                                <%= transaction.type === 'Withdrawal' || transaction.type === 'Purchase' ? '-' : '+' %>â‚¹<%= transaction.amount %>
                              </td>
                            </tr>
                          <% }) %>
                        <% } else { %>
                          <tr>
                            <td colspan="4" class="text-center">No transactions found.</td>
                          </tr>
                        <% } %>
                      </tbody>
                    </table>
                  </div>
                </div>
                <nav aria-label="Wallet history pagination" class="mt-3">
                  <ul class="pagination">
                    <% if (typeof walletCurrentPage !== 'undefined' && typeof walletTotalPages !== 'undefined') { %>
                      <li class="page-item <%= walletCurrentPage === 1 ? 'disabled' : '' %>">
                        <a class="page-link" href="?walletPage=<%= walletCurrentPage - 1 %>" <%= walletCurrentPage === 1 ? 'tabindex="-1" aria-disabled="true"' : '' %>>Previous</a>
                      </li>
                      
                      <% for(let i = 1; i <= walletTotalPages; i++) { %>
                        <% if (i === 1 || i === walletTotalPages || (i >= walletCurrentPage - 1 && i <= walletCurrentPage + 1)) { %>
                          <li class="page-item <%= walletCurrentPage === i ? 'active' : '' %>">
                            <a class="page-link" href="?walletPage=<%= i %>"><%= i %></a>
                          </li>
                        <% } else if (i === walletCurrentPage - 2 || i === walletCurrentPage + 2) { %>
                          <li class="page-item disabled">
                            <span class="page-link">...</span>
                          </li>
                        <% } %>
                      <% } %>
                      
                      <li class="page-item <%= walletCurrentPage === walletTotalPages ? 'disabled' : '' %>">
                        <a class="page-link" href="?walletPage=<%= walletCurrentPage + 1 %>" <%= walletCurrentPage === walletTotalPages ? 'tabindex="-1" aria-disabled="true"' : '' %>>Next</a>
                      </li>
                    <% } %>
                  </ul>
                </nav>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<!-- Add Modal for Order Details -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Order details will be loaded here dynamically -->
      </div>
    </div>
  </div>
</div>

<!-- Add Modal for Address Edit -->
<div class="modal fade" id="addressEditModal" tabindex="-1" aria-labelledby="addressEditModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addressEditModalLabel">Edit Address</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Address edit form will be loaded here dynamically -->
      </div>
    </div>
  </div>
</div>

<!-- Add Modal for Order Cancellation -->
<div class="modal fade" id="orderCancelModal" tabindex="-1" aria-labelledby="orderCancelModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderCancelModalLabel">Cancel Order</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to cancel this order?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-danger" id="confirmCancelOrder">Confirm Cancellation</button>
      </div>
    </div>
  </div>
</div>

<%- include("../../views/partials/user/footer.ejs") %>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.14/dist/sweetalert2.all.min.js"></script>
<script>
 document.getElementById('updateProfileForm').addEventListener('submit', async (e) => {
  e.preventDefault(); // Prevent form submission

  const formData = new FormData(e.target); // Get form data
  const data = Object.fromEntries(formData.entries()); // Convert FormData to an object

  try {
    const response = await fetch('/updateProfile', {
      method: 'POST', // HTTP method
      headers: {
        'Content-Type': 'application/json', // Specify JSON content
      },
      body: JSON.stringify(data), // Send JSON data
    });

    const result = await response.json(); // Parse JSON response

    if (result.success) {
      // Show success notification
      Swal.fire({
        icon: 'success',
        title: 'Profile Updated!',
        text: result.message,
        timer: 2000,
        showConfirmButton: false,
      });

      // Optionally update the UI with the new data
      document.getElementById('name').value = data.name;
      document.getElementById('phone').value = data.phone;
    } else {
      // Handle error case
      Swal.fire({
        icon: 'error',
        title: 'Update Failed',
        text: result.message,
      });
    }
  } catch (error) {
    // Handle unexpected errors
    console.error('Error updating profile:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An unexpected error occurred.',
    });
  }
});


  async function retryPayment(orderId) {
    try {
      const response = await fetch('/orders/retry-payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ orderId }),
      });

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.message || 'Failed to create order');
      }

      const options = {
        key: data.data.key_id,
        amount: data.data.amount,
        currency: data.data.currency,
        name: data.data.name,
        description: data.data.description,
        order_id: data.data.order_id,
        handler: function (response) {
          const orderDetails = {
            orderId: orderId,
            userId: '<%= user._id %>'
          };
          verifyRazorpayPayment(response, orderDetails);
        },
        prefill: data.data.prefill,
        theme: {
          color: '#3399cc'
        }
      };

      const rzp = new Razorpay(options);
      rzp.on('payment.failed', function (response) {
        Swal.fire({
          icon: 'error',
          title: 'Payment Failed',
          text: response.error.description
        });
      });

      rzp.open();
    } catch (error) {
      console.error('Error during payment:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred during payment. Please try again.'
      });
    }
  }

  function verifyRazorpayPayment(response, orderDetails) {
    fetch('/verify-payment', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        razorpay_payment_id: response.razorpay_payment_id,
        razorpay_order_id: response.razorpay_order_id,
        razorpay_signature: response.razorpay_signature,
        orderDetails: orderDetails,
        retryPayment: true,
        orderId: orderDetails.orderId,
        userId: orderDetails.userId
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          icon: 'success',
          title: 'Payment Successful!',
          text: 'Your payment has been processed successfully',
          showConfirmButton: false,
          timer: 1500
        }).then(() => {
          window.location.reload();
        });
      } else {
        throw new Error(data.message || 'Payment verification failed');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Payment Verification Failed',
        text: error.message || 'Failed to verify payment'
      });
    });
  }

  function cancelOrder(orderId) {
    Swal.fire({
      title: "Are you sure?",
      text: "Do you want to cancel this order?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, cancel it!"
    }).then((result) => {
      if (result.isConfirmed) {
        fetch('/orders/cancel', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            orderId: orderId,
            status: "Cancelled"
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              title: "Cancelled!",
              text: data.message || "Order has been cancelled successfully.",
              icon: "success",
              timer: 1500,
              showConfirmButton: false
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              title: "Error",
              text: data.message || "Failed to cancel the order.",
              icon: "error"
            });
          }
        })
        .catch(error => {
          console.error("Error:", error);
          Swal.fire({
            title: "Error",
            text: "An error occurred while cancelling the order.",
            icon: "error"
          });
        });
      }
    });
  }

  function redirectToReturnReason(orderId) {
    Swal.fire({
      title: "Are you sure?",
      text: "Do you want to proceed to return this order?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, proceed!"
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = `/return-reason?orderId=${orderId}`;
      }
    });
  }
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Pagination configuration
    const itemsPerPage = 5;
    let currentPage = 1;

    // Initialize pagination for orders
    function initOrdersPagination() {
      const orderRows = document.querySelectorAll('#orders table tbody tr');
      const totalPages = Math.ceil(orderRows.length / itemsPerPage);
      
      // Create pagination
      const paginationHtml = createPaginationHtml(totalPages, currentPage);
      document.querySelector('#orders nav ul.pagination').innerHTML = paginationHtml;
      
      // Show first page
      showPage(orderRows, currentPage, itemsPerPage);
      
      // Add click events to pagination
      document.querySelectorAll('#orders .page-link').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const page = this.dataset.page;
          if (page === 'prev') {
            if (currentPage > 1) currentPage--;
          } else if (page === 'next') {
            if (currentPage < totalPages) currentPage++;
          } else {
            currentPage = parseInt(page);
          }
          showPage(orderRows, currentPage, itemsPerPage);
          updatePaginationState(totalPages, currentPage);
        });
      });
    }

    // Initialize pagination for wallet history
    function initWalletHistoryPagination() {
      const walletRows = document.querySelectorAll('#wallet-history table tbody tr');
      const totalPages = Math.ceil(walletRows.length / itemsPerPage);
      
      // Create pagination
      const paginationHtml = createPaginationHtml(totalPages, currentPage);
      document.querySelector('#wallet-history nav ul.pagination').innerHTML = paginationHtml;
      
      // Show first page
      showPage(walletRows, currentPage, itemsPerPage);
      
      // Add click events to pagination
      document.querySelectorAll('#wallet-history .page-link').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const page = this.dataset.page;
          if (page === 'prev') {
            if (currentPage > 1) currentPage--;
          } else if (page === 'next') {
            if (currentPage < totalPages) currentPage++;
          } else {
            currentPage = parseInt(page);
          }
          showPage(walletRows, currentPage, itemsPerPage);
          updatePaginationState(totalPages, currentPage);
        });
      });
    }

    // Helper function to show specific page
    function showPage(items, page, perPage) {
      const start = (page - 1) * perPage;
      const end = start + perPage;
      
      items.forEach((item, index) => {
        if (index >= start && index < end) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    }

    // Helper function to create pagination HTML
    function createPaginationHtml(totalPages, currentPage) {
      let html = `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
          <a class="page-link" href="#" data-page="prev">Previous</a>
        </li>
      `;
      
      for (let i = 1; i <= totalPages; i++) {
        html += `
          <li class="page-item ${currentPage === i ? 'active' : ''}">
            <a class="page-link" href="#" data-page="${i}">${i}</a>
          </li>
        `;
      }
      
      html += `
        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
          <a class="page-link" href="#" data-page="next">Next</a>
        </li>
      `;
      
      return html;
    }

    // Helper function to update pagination state
    function updatePaginationState(totalPages, currentPage) {
      document.querySelectorAll('.page-item').forEach(item => {
        item.classList.remove('active');
      });
      
      const currentPageItem = document.querySelector(`[data-page="${currentPage}"]`).parentElement;
      currentPageItem.classList.add('active');
      
      const prevButton = document.querySelector('[data-page="prev"]').parentElement;
      const nextButton = document.querySelector('[data-page="next"]').parentElement;
      
      prevButton.classList.toggle('disabled', currentPage === 1);
      nextButton.classList.toggle('disabled', currentPage === totalPages);
    }

    // Initialize both paginations
    initOrdersPagination();
    initWalletHistoryPagination();

    // Handle tab changes to reinitialize pagination
    document.querySelectorAll('a[data-bs-toggle="pill"]').forEach(tab => {
      tab.addEventListener('shown.bs.tab', function(e) {
        if (e.target.id === 'orders-tab') {
          initOrdersPagination();
        } else if (e.target.id === 'wallet-history-tab') {
          initWalletHistoryPagination();
        }
      });
    });
  });
</script>
