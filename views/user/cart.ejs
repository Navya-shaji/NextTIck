<%- include("../../views/partials/user/header.ejs") %>

<style>
    /* General Styles */
    .cart-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 30px;
        border-radius: 12px;
        background-color: #fff;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .cart-table thead {
        background-color: #424874;
        color: white;
    }

    .cart-table th {
        padding: 15px;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 14px;
        letter-spacing: 0.5px;
    }

    .cart-table td {
        padding: 15px;
        border: 1px solid #eee;
        text-align: center;
        font-size: 15px;
        vertical-align: middle;
    }

    .cart-table .image.product-thumbnail img {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 8px;
        border: 1px solid #eee;
    }

    .cart-table .product-des {
        text-align: left;
        padding-left: 15px;
    }

    .cart-table .product-name span {
        color: #424874;
        font-weight: 600;
        font-size: 15px;
    }

    .cart-table .qty-val {
        width: 50px;
        text-align: center;
        font-size: 15px;
        border: 1px solid #eee;
        border-radius: 4px;
        padding: 5px;
        background-color: #f8f9fa;
    }

    .cart-table .qty-up,
    .cart-table .qty-down {
        background-color: #424874;
        border: none;
        border-radius: 6px;
        width: 32px;
        height: 32px;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        color: white;
        transition: all 0.3s ease;
        margin: 0 5px;
    }

    .cart-table .qty-up:hover,
    .cart-table .qty-down:hover {
        background-color: #313866;
        transform: translateY(-1px);
    }

    .cart-table .qty-up:disabled,
    .cart-table .qty-down:disabled {
        background-color: #A6B1E1;
        cursor: not-allowed;
        transform: none;
    }

    .btn-black {
        background-color: #424874;
        color: white;
        padding: 12px 25px;
        border-radius: 8px;
        font-size: 15px;
        font-weight: 600;
        border: none;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-black:hover {
        background-color: #313866;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(66, 72, 116, 0.2);
    }

    .btn-black:disabled {
        background-color: #A6B1E1;
        cursor: not-allowed;
        transform: none;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 14px;
        border: none;
        transition: all 0.3s ease;
    }

    .btn-danger:hover {
        background-color: #c82333;
        transform: translateY(-1px);
    }

    /* Cart Totals Section */
    .cart-total-section {
        background-color: #f8f9fa;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    }

    .cart-total-section .total-label {
        font-size: 18px;
        color: #424874;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 10px;
    }

    .cart-total-section .total-amount {
        font-size: 24px;
        font-weight: 700;
        color: #424874;
    }

    /* Empty Cart Styles */
    .text-center h1 {
        color: #424874;
        font-size: 28px;
        font-weight: 600;
        margin-bottom: 20px;
    }

    .text-center p {
        color: #666;
        font-size: 16px;
        line-height: 1.6;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .cart-table th,
        .cart-table td {
            padding: 12px;
            font-size: 14px;
        }

        .cart-table .qty-val {
            width: 40px;
            font-size: 14px;
        }

        .cart-table .qty-up,
        .cart-table .qty-down {
            width: 28px;
            height: 28px;
            font-size: 14px;
        }

        .btn-black {
            padding: 10px 20px;
            font-size: 14px;
        }

        .cart-total-section .total-label {
            font-size: 16px;
        }

        .cart-total-section .total-amount {
            font-size: 20px;
        }
    }

    @media (max-width: 576px) {
        .cart-table {
            font-size: 13px;
        }

        .cart-table .image.product-thumbnail img {
            width: 60px;
            height: 60px;
        }

        .btn-black {
            padding: 8px 16px;
            font-size: 13px;
        }
    }
</style>

<main class="main">
    <div class="page-header breadcrumb-wrap">
        <div class="container"></div>
    </div>
    <section class="mt-50 mb-50">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="table-responsive">
                        <% if (cart && products.length > 0) { %>
                            <table class="table cart-table">
                                <thead>
                                    <tr>
                                        <th>Image</th>
                                        <th>Name</th>
                                        <th>Price</th>
                                        <th>Quantity</th>
                                        <th>Subtotal</th>
                                        <th>Remove</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% let totalAmount = 0; %>
                                    <% products.forEach(item => { %>
                                        <tr>
                                            <td class="image product-thumbnail">
                                                <img src="/uploads/re-image/<%= item.productId.productImage?.[0] || 'default.png' %>" alt="#">
                                            </td>
                                            <td class="product-des product-name">
                                                <h5 class="product-name">
                                                    <span><%= item.productId?.productName || 'Unnamed Product' %></span>
                                                </h5>
                                            </td>
                                            <td class="price" data-title="Price">
                                                <span>₹<%= item.price %></span>
                                            </td>
                                            <td class="text-center" data-title="Quantity">
                                                <div class="detail-qty">
                                                    <button class="qty-down" 
                                                            onclick="updateQuantity('<%= item.productId?._id %>', -1)"
                                                            <%= item.status !== 'placed' ? 'disabled' : '' %> >
                                                        - 
                                                    </button>
                                                    <input readonly class="qty-val" 
                                                           id="qty-<%= item.productId?._id %>" 
                                                           value="<%= item.quantity %>">
                                                    <button class="qty-up" 
                                                            onclick="updateQuantity('<%= item.productId?._id %>', 1)"
                                                            <%= item.status !== 'placed' ? 'disabled' : '' %> >
                                                        +
                                                    </button>
                                                </div>
                                            </td>
                                            <td class="text-right" data-title="Subtotal">
                                                <span id="totalPrice-<%= item.productId?._id %>">
                                                    ₹<%= item.totalPrice || 0 %>
                                                </span>
                                            </td>
                                            <td class="action" data-title="Remove">
                                                <% if (item.status === 'placed') { %>
                                                    <button type="button" 
                                                            class="btn btn-danger" 
                                                            onclick="confirmRemoveProduct('<%= item.productId?._id %>')">
                                                        Delete
                                                    </button>
                                                <% } %>
                                            </td>
                                        </tr>
                                        <% totalAmount += item.totalPrice; %>
                                    <% }); %>
                                    <tr class="cart-total-section">
                                        <td colspan="4" class="total-label">Total</td>
                                        <td colspan="2" class="total-amount">
                                            ₹<%= totalAmount.toLocaleString() %>
                                        </td>
                                    </tr>
                                    <tr class="cart-total-section">
                                        <td colspan="6">
                                            <% if (products.some(item => item.status === 'placed')) { %>
                                                <a href="/checkout" class="btn btn-black">
                                                    <i class="fi-rs-box-alt mr-10"></i> Proceed To CheckOut
                                                </a>
                                            <% } else { %>
                                                <button class="btn btn-black" disabled>
                                                    <i class="fi-rs-box-alt mr-10"></i> Proceed To CheckOut
                                                </button>
                                            <% } %>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        <% } else { %>
                            <div class="text-center">
                                <h1 class="mb-4">Your Cart is Empty</h1>
                                <p class="mb-4">It seems like you haven't added any products to your cart yet.</p>
                                <p>Start browsing our products and add them to your cart to complete your order.</p>
                            </div>
                        <% } %>
                    </div>

                    <div class="cart-action text-end">
                        <a href="/" class="btn btn-black">
                            <i class="fi-rs-shopping-bag mr-10"></i> Continue Shopping
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
 async function updateQuantity(productId, change) {
    try {
        const quantityElement = document.getElementById(`qty-${productId}`);
        const totalPriceElement = document.getElementById(`totalPrice-${productId}`);
        const totalAmountElement = document.querySelector('.total-amount');
        const currentQty = parseInt(quantityElement.value) || 0;
        const newQuantity = currentQty + change;

        // Disable buttons during operation to prevent multiple clicks
        const decreaseBtn = document.querySelector(`#qty-${productId}`).parentElement.querySelector('.qty-down');
        const increaseBtn = document.querySelector(`#qty-${productId}`).parentElement.querySelector('.qty-up');
        decreaseBtn.disabled = true;
        increaseBtn.disabled = true;

        // Validate quantity limits
        if (newQuantity < 1) {
            await Swal.fire({
                icon: "warning",
                title: "Minimum quantity reached",
                text: "The minimum quantity allowed is 1",
                confirmButtonColor: '#424874',
                timer: 2000,
                timerProgressBar: true,
                showConfirmButton: false
            });
            // Re-enable buttons with appropriate states
            decreaseBtn.disabled = true;
            decreaseBtn.style.backgroundColor = '#A6B1E1';
            increaseBtn.disabled = false;
            increaseBtn.style.backgroundColor = '#424874';
            return;
        }

        if (newQuantity > 5) {
            await Swal.fire({
                icon: "warning",
                title: "Maximum quantity reached",
                text: "The maximum quantity allowed is 5",
                confirmButtonColor: '#424874',
                timer: 2000,
                timerProgressBar: true,
                showConfirmButton: false
            });
            // Re-enable buttons with appropriate states
            decreaseBtn.disabled = false;
            decreaseBtn.style.backgroundColor = '#424874';
            increaseBtn.disabled = true;
            increaseBtn.style.backgroundColor = '#A6B1E1';
            return;
        }

        // Show loading state with minimum duration
        const loadingAlert = Swal.fire({
            title: 'Updating cart...',
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            },
            didOpen: () => {
                // Ensure loading shows for at least 500ms
                return new Promise(resolve => setTimeout(resolve, 500));
            }
        });

        // Make API request
        const response = await fetch('/cart/update-quantity', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                productId,
                quantity: newQuantity
            })
        });

        const data = await response.json();
        
        // Ensure minimum loading time has passed
        await new Promise(resolve => setTimeout(resolve, 500));
        await loadingAlert.close();

        if (data.success) {
            // Show success message
            await Swal.fire({
                icon: 'success',
                title: 'Updated Successfully',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });

            // Update quantity display
            quantityElement.value = newQuantity;
            
            // Update item total price
            totalPriceElement.innerText = `₹${data.totalPrice.toLocaleString()}`;
            
            // Update cart total
            totalAmountElement.innerText = `₹${data.cartTotal.toLocaleString()}`;
            
            // Update button states
            decreaseBtn.disabled = newQuantity <= 1;
            increaseBtn.disabled = newQuantity >= 5;
            
            decreaseBtn.style.backgroundColor = newQuantity <= 1 ? '#A6B1E1' : '#424874';
            increaseBtn.style.backgroundColor = newQuantity >= 5 ? '#A6B1E1' : '#424874';
        } else {
            throw new Error(data.message || "Error updating cart.");
        }
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
            icon: "error",
            title: "Error",
            text: error.message || "Unable to update cart. Please try again.",
            confirmButtonColor: '#424874',
            timer: 3000,
            timerProgressBar: true
        });
    } finally {
        // Re-enable buttons in case of error
        const decreaseBtn = document.querySelector(`#qty-${productId}`).parentElement.querySelector('.qty-down');
        const increaseBtn = document.querySelector(`#qty-${productId}`).parentElement.querySelector('.qty-up');
        const currentQty = parseInt(document.getElementById(`qty-${productId}`).value) || 0;
        
        decreaseBtn.disabled = currentQty <= 1;
        increaseBtn.disabled = currentQty >= 5;
        
        decreaseBtn.style.backgroundColor = currentQty <= 1 ? '#A6B1E1' : '#424874';
        increaseBtn.style.backgroundColor = currentQty >= 5 ? '#A6B1E1' : '#424874';
    }
}

// Initialize quantity buttons on page load
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.detail-qty').forEach(detailQty => {
        const quantityInput = detailQty.querySelector('.qty-val');
        if (quantityInput) {
            const qty = parseInt(quantityInput.value) || 0;
            const decreaseBtn = detailQty.querySelector('.qty-down');
            const increaseBtn = detailQty.querySelector('.qty-up');
            
            if (decreaseBtn && increaseBtn) {
                decreaseBtn.disabled = qty <= 1;
                increaseBtn.disabled = qty >= 5;
                
                decreaseBtn.style.backgroundColor = qty <= 1 ? '#A6B1E1' : '#424874';
                increaseBtn.style.backgroundColor = qty >= 5 ? '#A6B1E1' : '#424874';
            }
        }
    });
});

    function confirmRemoveProduct(productId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to remove this product from your cart?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/cart/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to remove item'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to remove item'
                    });
                });
            }
        });
    }
</script>

<%- include("../../views/partials/user/footer.ejs") %>