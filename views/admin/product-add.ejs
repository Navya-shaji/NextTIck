<%- include("../../views/partials/admin/header") %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.css">

<style>
   .error-message {
       color: #dc3545;
       font-size: 0.875rem;
       margin-top: 0.25rem;
   }

   .content-main {
       background-color: #f8f9fa;
       min-height: 100vh;
       padding: 2rem;
   }

   .card {
       border: none;
       box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
       margin-bottom: 1.5rem;
   }

   .card-header {
       background-color: #fff;
       border-bottom: 1px solid #e9ecef;
       padding: 1.25rem;
   }

   .card-body {
       padding: 1.5rem;
   }

   .form-label {
       font-weight: 500;
       color: #495057;
       margin-bottom: 0.5rem;
   }

   .form-control {
       border: 1px solid #ced4da;
       border-radius: 0.375rem;
       padding: 0.75rem;
       transition: border-color 0.15s ease-in-out;
   }

   .form-control:focus {
       border-color: #86b7fe;
       box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
   }

   .thumbnails-container {
       display: flex;
       flex-wrap: wrap;
       gap: 10px;
       margin-bottom: 15px;
       min-height: 100px;
       border: 2px dashed #ddd;
       border-radius: 4px;
       padding: 10px;
       background-color: #f8f9fa;
   }

   .thumbnail-wrapper {
       position: relative;
       width: 100px;
       height: 100px;
       border-radius: 4px;
       overflow: hidden;
       box-shadow: 0 2px 4px rgba(0,0,0,0.1);
   }

   .thumbnail {
       width: 100%;
       height: 100%;
       object-fit: cover;
   }

   .delete-btn {
       position: absolute;
       top: 5px;
       right: 5px;
       width: 20px;
       height: 20px;
       border-radius: 50%;
       background-color: rgba(255, 0, 0, 0.7);
       color: white;
       border: none;
       cursor: pointer;
       display: flex;
       align-items: center;
       justify-content: center;
       font-size: 14px;
       padding: 0;
       line-height: 1;
   }

   .delete-btn:hover {
       background-color: rgba(255, 0, 0, 0.9);
   }

   .image-upload-container {
       border: 2px dashed #ddd;
       border-radius: 4px;
       padding: 20px;
       text-align: center;
       background-color: #f8f9fa;
       margin-top: 10px;
   }

   .image-upload-icon {
       font-size: 24px;
       margin-bottom: 10px;
   }

   .image-upload-text {
       color: #666;
       margin-top: 10px;
       font-size: 14px;
   }

   #imageInput {
       width: 100%;
       max-width: 300px;
       margin: 0 auto;
   }

   .error-message {
       color: #dc3545;
       margin-top: 5px;
       font-size: 14px;
   }

   .btn-primary {
       background-color: #0d6efd;
       border-color: #0d6efd;
       color: white;
       padding: 0.75rem 1.5rem;
       border-radius: 0.375rem;
       font-weight: 500;
       transition: all 0.2s ease;
   }

   .btn-primary:hover {
       background-color: #0b5ed7;
       border-color: #0a58ca;
   }

   .form-section {
       margin-bottom: 2rem;
   }

   .form-section-title {
       font-size: 1.25rem;
       font-weight: 600;
       color: #212529;
       margin-bottom: 1rem;
   }

   .select2-container .select2-selection--single {
       height: calc(3.5rem + 2px);
       padding: 0.75rem;
       font-size: 1rem;
       border: 1px solid #ced4da;
       border-radius: 0.375rem;
   }

   /* Crop modal styles */
   .modal-dialog.modal-lg {
       max-width: 95%;
       margin: 10px auto;
   }

   .modal-content {
       height: calc(100vh - 40px);
   }

   .modal-body {
       height: calc(100vh - 160px);
       padding: 0;
       overflow: hidden;
   }

   .img-container {
       width: 100%;
       height: 100%;
       background: #f8f9fa;
       overflow: hidden;
   }

   #cropImage {
       max-width: none;
       max-height: none;
   }

   .cropper-container {
       width: 100% !important;
       height: 100% !important;
   }

   .cropper-wrap-box {
       background-color: #f8f9fa;
   }

   .modal-footer {
       border-top: 1px solid #dee2e6;
       padding: 1rem;
   }

   .modal-header {
       border-bottom: 1px solid #dee2e6;
       padding: 1rem;
   }

   .modal-backdrop {
       opacity: 0.7;
   }

   /* Make handles more visible */
   .cropper-point {
       width: 10px;
       height: 10px;
       background-color: #0d6efd;
       opacity: 0.8;
   }

   .cropper-line {
       background-color: #0d6efd;
       opacity: 0.3;
   }

   .cropper-view-box {
       outline: 2px solid #0d6efd;
   }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-8">
            <form method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="handleFormSubmit(event)">
                <div class="card">
                    <div class="card-body">
                        <div class="form-section">
                            <div class="form-section-title">Basic Information</div>
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Enter product name" name="productName" class="form-control" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            
                            <div class="mb-4">
                                <label for="descriptionid" class="form-label">Description</label>
                                <textarea class="form-control" id="descriptionid" name="description" rows="4" placeholder="Enter product description"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="form-section">
                            <div class="form-section-title">Product Details</div>
                            <div class="row">
                                <div class="col-md-6 mb-4">
                                    <label class="form-label">Brand</label>
                                    <select class="form-select" name="brand" required>
                                        <% for(let i = 0; i < brand.length; i++) { %>
                                            <option value="<%= brand[i]._id %>"><%= brand[i].brandName %></option>
                                        <% } %>
                                    </select>
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label class="form-label">Category</label>
                                    <select class="form-select" name="category">
                                        <% for(let i = 0; i < cat.length; i++) { %>
                                            <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                        <% } %>
                                    </select>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-4 mb-4">
                                    <label class="form-label">Regular Price</label>
                                    <input type="number" class="form-control" name="regularPrice" placeholder="0.00">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label class="form-label">Sale Price</label>
                                    <input type="number" class="form-control" name="salePrice" placeholder="0.00">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input type="number" class="form-control" name="quantity" placeholder="0">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>

                        <div class="form-section">
                            <div class="form-section-title">Product Images</div>
                            <div class="thumbnails-container" id="thumbnailsContainer"></div>
                            <div class="image-upload-container">
                                <div class="image-upload-icon">ðŸ“¸</div>
                                <input type="file" class="form-control" id="imageInput" 
                                       accept="image/png, image/jpeg, image/jpg" 
                                       multiple
                                       onchange="handleImageSelect(event)">
                                <div class="image-upload-text">Choose product images</div>
                                <div id="images-error" class="error-message"></div>
                            </div>
                            <input type="hidden" name="images" id="selectedImages">
                        </div>

                        <div>
                            <button class="btn btn-md rounded font-sm hover-up"  type="submit" onclick="validateForm()">Publish</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        
    </div>
</section>

<div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="cropImage" src="" alt="Image to crop">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButton">
                    <span id="cropButtonText">Crop & Save</span>
                    <span id="cropButtonSpinner" class="spinner-border spinner-border-sm d-none"></span>
                </button>
            </div>
        </div>
    </div>
</div>

<script>

let selectedFiles = [];
let currentFile = null;
let cropper = null;
let isProcessing = false;

function handleImageSelect(event) {
    const files = event.target.files;
    
    if (!files || files.length === 0) return;
    
    const file = files[0];
    
    // Validate file type
    if (!file.type.startsWith('image/')) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid File',
            text: 'Please select an image file'
        });
        return;
    }
    
    currentFile = file;
    const reader = new FileReader();
    
    reader.onload = function(e) {
        const image = document.getElementById('cropImage');
        image.src = e.target.result;
        
        // Destroy existing cropper if it exists
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        
        // Show modal
        const cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
        cropModal.show();
        
        // Initialize cropper after modal is shown
        setTimeout(() => {
            cropper = new Cropper(image, {
                viewMode: 0,
                dragMode: 'crop',
                aspectRatio: NaN,
                background: true,
                autoCropArea: 0.98,
                movable: true,
                rotatable: true,
                scalable: true,
                zoomable: true,
                zoomOnTouch: true,
                zoomOnWheel: true,
                wheelZoomRatio: 0.1,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: true,
                center: true,
                highlight: true,
                guides: true,
                ready: function() {
                    // Enable all controls
                    this.cropper.clear();
                    this.cropper.crop();
                    
                    // Set initial crop area
                    const canvasData = this.cropper.getCanvasData();
                    const cropBoxData = {
                        left: canvasData.left + 50,
                        top: canvasData.top + 50,
                        width: canvasData.width - 100,
                        height: canvasData.height - 100
                    };
                    this.cropper.setCropBoxData(cropBoxData);
                }
            });
        }, 500); // Wait for modal transition
    };
    
    reader.readAsDataURL(file);
    event.target.value = ''; // Reset input
}

// Clean up cropper when modal is closed
document.getElementById('cropModal').addEventListener('hidden.bs.modal', function() {
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
    document.getElementById('cropImage').src = '';
    currentFile = null;
    isProcessing = false;
});

// Handle crop button click
document.getElementById('cropButton').addEventListener('click', async function() {
    if (!cropper || !currentFile || isProcessing) return;
    
    isProcessing = true;
    const button = this;
    const text = document.getElementById('cropButtonText');
    const spinner = document.getElementById('cropButtonSpinner');
    
    button.disabled = true;
    text.classList.add('d-none');
    spinner.classList.remove('d-none');
    
    try {
        const canvas = cropper.getCroppedCanvas({
            maxWidth: 4096,
            maxHeight: 4096,
            fillColor: '#fff',
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high'
        });
        
        const blob = await new Promise((resolve) => {
            canvas.toBlob((blob) => resolve(blob), currentFile.type, 0.9);
        });
        
        if (!blob) throw new Error('Failed to create blob');
        
        const croppedFile = new File([blob], currentFile.name, {
            type: currentFile.type,
            lastModified: Date.now()
        });
        
        selectedFiles.push({
            file: croppedFile,
            preview: canvas.toDataURL(currentFile.type)
        });
        
        updateThumbnails();
        
        // Close modal
        const modalElement = document.getElementById('cropModal');
        const modal = bootstrap.Modal.getInstance(modalElement);
        modal.hide();
        
    } catch (error) {
        console.error('Error cropping image:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to crop image. Please try again.'
        });
    } finally {
        button.disabled = false;
        text.classList.remove('d-none');
        spinner.classList.add('d-none');
        isProcessing = false;
    }
});

function updateThumbnails() {
    const container = document.getElementById('thumbnailsContainer');
    container.innerHTML = '';
    
    selectedFiles.forEach((item, index) => {
        const wrapper = document.createElement('div');
        wrapper.className = 'thumbnail-wrapper';
        
        const img = document.createElement('img');
        img.src = item.preview;
        img.className = 'thumbnail';
        img.alt = `Product image ${index + 1}`;
        
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'delete-btn';
        deleteBtn.innerHTML = 'Ã—';
        deleteBtn.onclick = () => deleteImage(index);
        
        wrapper.appendChild(img);
        wrapper.appendChild(deleteBtn);
        container.appendChild(wrapper);
    });

    document.getElementById('selectedImages').value = JSON.stringify(
        selectedFiles.map(item => item.file.name)
    );

    // Update image count message
    const remainingImages = 4 - selectedFiles.length;
    if (remainingImages > 0) {
        document.getElementById('images-error').textContent = `You can upload ${remainingImages} more image${remainingImages > 1 ? 's' : ''}`;
        document.getElementById('images-error').style.color = '#6c757d';
    } else {
        document.getElementById('images-error').textContent = 'Maximum number of images reached';
        document.getElementById('images-error').style.color = '#dc3545';
    }
}

function deleteImage(index) {
    selectedFiles.splice(index, 1);
    updateThumbnails();
}

function validateForm() {
    clearErrorMessages();
    let isValid = true;

    // Product Name Validation
    const name = document.getElementsByName('productName')[0].value;
    if (name.trim() === '') {
        displayErrorMessage('productName-error', 'Product name is required');
        isValid = false;
    } else if (name.length < 3) {
        displayErrorMessage('productName-error', 'Product name must be at least 3 characters long');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s-]+$/.test(name)) {
        displayErrorMessage('productName-error', 'Product name can only contain letters, numbers, spaces, and hyphens');
        isValid = false;
    }

    // Description Validation
    const description = document.getElementById('descriptionid').value;
    if (description.trim() === '') {
        displayErrorMessage('description-error', 'Product description is required');
        isValid = false;
    } else if (description.length < 20) {
        displayErrorMessage('description-error', 'Description must be at least 20 characters long');
        isValid = false;
    }

    // Price Validation
    const regularPrice = document.getElementsByName('regularPrice')[0].value;
    const salePrice = document.getElementsByName('salePrice')[0].value;

    if (!regularPrice || regularPrice <= 0) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than 0');
        isValid = false;
    } else if (!/^\d+(\.\d{1,2})?$/.test(regularPrice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be a valid number with up to 2 decimal places');
        isValid = false;
    }

    // Sale Price Validation
    if (salePrice.trim() !== '') {  // Only validate if sale price is provided
        if (!/^\d+(\.\d{1,2})?$/.test(salePrice)) {
            displayErrorMessage('salePrice-error', 'Sale price must be a valid number with up to 2 decimal places');
            isValid = false;
        } else if (parseFloat(salePrice) <= 0) {
            displayErrorMessage('salePrice-error', 'Sale price must be greater than 0');
            isValid = false;
        } else if (parseFloat(salePrice) >= parseFloat(regularPrice)) {
            displayErrorMessage('salePrice-error', 'Sale price must be less than regular price');
            isValid = false;
        } else if (parseFloat(salePrice) <= parseFloat(regularPrice) * 0.1) {
            displayErrorMessage('salePrice-error', 'Sale price cannot be less than 10% of regular price');
            isValid = false;
        }
    }

    // Quantity Validation
    const quantity = document.getElementsByName('quantity')[0].value;
    if (!quantity || quantity < 0) {
        displayErrorMessage('quantity-error', 'Quantity must be 0 or greater');
        isValid = false;
    } else if (!Number.isInteger(parseFloat(quantity))) {
        displayErrorMessage('quantity-error', 'Quantity must be a whole number');
        isValid = false;
    }

    // Brand Validation
    const brand = document.getElementsByName('brand')[0].value;
    if (!brand) {
        displayErrorMessage('brand-error', 'Please select a brand');
        isValid = false;
    }

    // Category Validation
    const category = document.getElementsByName('category')[0].value;
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category');
        isValid = false;
    }

    // Image Validation
    if (selectedFiles.length < 3) {
        displayErrorMessage('images-error', 'Please upload at least 3 images');
        isValid = false;
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
        errorElement.style.padding = '0.5rem';
        errorElement.style.marginTop = '0.25rem';
        errorElement.style.borderRadius = '0.25rem';
        errorElement.style.backgroundColor = '#f8d7da';
        errorElement.style.border = '1px solid #f5c6cb';
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.textContent = '';
        element.style.display = 'none';
    });
}
async function handleFormSubmit(event) {
    event.preventDefault();
    
    if (!validateForm()) {
        return false;
    }

    if (selectedFiles.length === 0) {
        Swal.fire({
            icon: 'error',
            title: 'Images Required',
            text: 'Please select at least one product image',
            confirmButtonColor: '#dc3545'
        });
        return false;
    }

    try {
        const formData = new FormData(event.target);
        
        // Remove any existing files
        formData.delete('images');
        
        // Add each selected file
        selectedFiles.forEach(item => {
            formData.append('images', item.file);
        });

        // Ensure salesPrice is set, even if it's the same as regularPrice
        if (!formData.get('salePrice') || formData.get('salePrice').trim() === '') {
            formData.set('salePrice', formData.get('regularPrice'));
        }

        const response = await fetch('/admin/addProducts', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.success) {
            await Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Product added successfully',
                confirmButtonColor: '#28a745'
            });
            window.location.href = '/admin/products';
        } else {
            throw new Error(data.error || 'Unknown error occurred');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Something went wrong! Please try again.',
            confirmButtonColor: '#dc3545'
        });
    }

    return false;
}

</script>

<%- include("../../views/partials/admin/footer") %>