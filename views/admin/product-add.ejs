<%- include("../../views/partials/admin/header") %>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Cropper.js CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.css">
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="../../styles/add-Products.css">
</head>
<body>
    <section class="content-main">
        <div class="row">
            <div class="col-12">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-8">
                <form method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return handleFormSubmit(event)">
                    <div class="card">
                        <div class="card-body">
                            <div class="form-section">
                                <div class="form-section-title">Basic Information</div>
                                <div class="mb-4">
                                    <label for="product_name" class="form-label">Product Name</label>
                                    <input type="text" placeholder="Enter product name" name="productName" class="form-control" id="product_name">
                                    <div id="productName-error" class="error-message"></div>
                                </div>
                                
                                <div class="mb-4">
                                    <label for="descriptionid" class="form-label">Description</label>
                                    <textarea class="form-control" id="descriptionid" name="description" rows="4" placeholder="Enter product description"></textarea>
                                    <div id="description-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="form-section">
                                <div class="form-section-title">Product Details</div>
                                <div class="row">
                                    <div class="col-md-6 mb-4">
                                        <label class="form-label">Brand</label>
                                        <select class="form-select" name="brand" required>
                                            <option value="">Select Brand</option>
                                            <% if (typeof brand !== 'undefined' && brand.length > 0) { %>
                                                <% for(let i = 0; i < brand.length; i++) { %>
                                                    <option value="<%= brand[i]._id %>"><%= brand[i].brandName %></option>
                                                <% } %>
                                            <% } else { %>
                                                <option value="1">Apple</option>
                                                <option value="2">Samsung</option>
                                                <option value="3">Sony</option>
                                            <% } %>
                                        </select>
                                        <div id="brand-error" class="error-message"></div>
                                    </div>
                                    <div class="col-md-6 mb-4">
                                        <label class="form-label">Category</label>
                                        <select class="form-select" name="category">
                                            <option value="">Select Category</option>
                                            <% if (typeof cat !== 'undefined' && cat.length > 0) { %>
                                                <% for(let i = 0; i < cat.length; i++) { %>
                                                    <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                                <% } %>
                                            <% } else { %>
                                                <option value="Electronics">Electronics</option>
                                                <option value="Clothing">Clothing</option>
                                                <option value="Sports">Sports</option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-4 mb-4">
                                        <label class="form-label">Regular Price</label>
                                        <input type="number" class="form-control" name="regularPrice" placeholder="0.00" step="0.01">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                    <div class="col-md-4 mb-4">
                                        <label class="form-label">Sale Price</label>
                                        <input type="number" class="form-control" name="salePrice" placeholder="0.00" step="0.01">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                    <div class="col-md-4 mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input type="number" class="form-control" name="quantity" placeholder="0">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="form-section">
                                <div class="form-section-title">Product Images</div>
                                <div class="thumbnails-container" id="thumbnailsContainer"></div>
                                <div class="image-upload-container" onclick="document.getElementById('imageInput').click()">
                                    <div class="image-upload-icon">ðŸ“¸</div>
                                    <input type="file" class="form-control" id="imageInput"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="handleImageSelect(event)">
                                    <div class="image-upload-text">Choose product images</div>
                                    <div id="images-error" class="error-message"></div>
                                </div>
                                <input type="hidden" name="images" id="selectedImages">
                            </div>

                            <div>
                                <button class="btn btn-primary btn-lg" type="submit">
                                    <span id="submitText">Publish Product</span>
                                    <span id="submitSpinner" class="spinner-border spinner-border-sm d-none ms-2"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </section>

    <!-- Crop Modal -->
    <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="img-container">
                        <img id="cropImage" alt="Image to crop" style="max-width: 100%; display: block;">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="cropButton">
                        <span id="cropButtonText">Crop & Save</span>
                        <span id="cropButtonSpinner" class="spinner-border spinner-border-sm d-none ms-2"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden canvas for cropping operations -->
    <canvas id="cropCanvas" style="display: none;"></canvas>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Cropper.js - Load this AFTER other scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.js"></script>

    <script>
        // Global variables
        let selectedFiles = [];
        let currentFile = null;
        let cropper = null;
        let isProcessing = false;
        let cropModal = null;

        // Wait for all scripts to load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded');
            
            // Check if Cropper is available
            if (typeof Cropper === 'undefined') {
                console.error('Cropper.js not loaded');
                return;
            }
            
            console.log('Cropper.js loaded successfully');
            
            // Initialize modal
            const modalElement = document.getElementById('cropModal');
            if (modalElement) {
                cropModal = new bootstrap.Modal(modalElement);
                console.log('Modal initialized');
            }
        });

        function handleImageSelect(event) {
            console.log('Image select triggered');
            
            const files = event.target.files;
            
            if (!files || files.length === 0) {
                console.log('No files selected');
                return;
            }

            // Check if we've reached the maximum number of images
            if (selectedFiles.length >= 4) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Maximum Images Reached',
                    text: 'You can only upload up to 4 images per product'
                });
                event.target.value = '';
                return;
            }

            const file = files[0];
            console.log('File selected:', file.name, file.type, file.size);
            
            // Validate file type
            if (!file.type.startsWith('image/')) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid File',
                    text: 'Please select an image file (PNG, JPEG, or JPG)'
                });
                event.target.value = '';
                return;
            }

            // Validate file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                Swal.fire({
                    icon: 'error',
                    title: 'File Too Large',
                    text: 'Please select an image smaller than 5MB'
                });
                event.target.value = '';
                return;
            }

            currentFile = file;
            const reader = new FileReader();
            
            reader.onload = function(e) {
                console.log('File read successfully');
                const image = document.getElementById('cropImage');
                if (image) {
                    image.src = e.target.result;
                    console.log('Image src set');
                    
                    // Show modal
                    if (cropModal) {
                        cropModal.show();
                        console.log('Modal shown');
                    } else {
                        console.error('Modal not initialized');
                    }
                } else {
                    console.error('Crop image element not found');
                }
            };
            
            reader.onerror = function(error) {
                console.error('Error reading file:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to read the selected file'
                });
            };
            
            reader.readAsDataURL(file);
            event.target.value = ''; // Reset input
        }

        // Initialize cropper when modal is shown
        document.addEventListener('DOMContentLoaded', function() {
            const modalElement = document.getElementById('cropModal');
            
            if (modalElement) {
                modalElement.addEventListener('shown.bs.modal', function() {
                    console.log('Modal shown event triggered');
                    
                    // Check if Cropper is available
                    if (typeof Cropper === 'undefined') {
                        console.error('Cropper is not available');
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Image cropping library failed to load. Please refresh the page.'
                        });
                        return;
                    }
                    
                    const image = document.getElementById('cropImage');
                    
                    if (!image || !image.src) {
                        console.error('Image not ready for cropping');
                        return;
                    }
                    
                    // Destroy existing cropper if it exists
                    if (cropper) {
                        console.log('Destroying existing cropper');
                        cropper.destroy();
                        cropper = null;
                    }
                    
                    // Wait a bit for the modal to fully render
                    setTimeout(() => {
                        try {
                            console.log('Initializing cropper');
                            cropper = new Cropper(image, {
                                viewMode: 1,
                                aspectRatio: NaN, // Free aspect ratio
                                autoCropArea: 0.8,
                                dragMode: 'crop',
                                background: true,
                                movable: true,
                                rotatable: true,
                                scalable: true,
                                zoomable: true,
                                zoomOnTouch: true,
                                zoomOnWheel: true,
                                wheelZoomRatio: 0.1,
                                cropBoxMovable: true,
                                cropBoxResizable: true,
                                toggleDragModeOnDblclick: true,
                                center: true,
                                highlight: true,
                                guides: true,
                                responsive: true,
                                restore: true,
                                checkCrossOrigin: false,
                                checkOrientation: true,
                                modal: true,
                                ready: function() {
                                    console.log('Cropper is ready');
                                },
                                error: function(error) {
                                    console.error('Cropper error:', error);
                                }
                            });
                        } catch (error) {
                            console.error('Error initializing cropper:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Cropper Error',
                                text: 'Failed to initialize image cropper: ' + error.message
                            });
                        }
                    }, 200);
                });

                // Clean up cropper when modal is closed
                modalElement.addEventListener('hidden.bs.modal', function() {
                    console.log('Modal hidden event triggered');
                    
                    if (cropper) {
                        console.log('Destroying cropper on modal close');
                        cropper.destroy();
                        cropper = null;
                    }
                    
                    const image = document.getElementById('cropImage');
                    if (image) {
                        image.src = '';
                    }
                    
                    currentFile = null;
                    isProcessing = false;
                    
                    // Reset button state
                    const button = document.getElementById('cropButton');
                    const text = document.getElementById('cropButtonText');
                    const spinner = document.getElementById('cropButtonSpinner');
                    
                    if (button && text && spinner) {
                        button.disabled = false;
                        text.classList.remove('d-none');
                        spinner.classList.add('d-none');
                    }
                });
            }
        });

        // Handle crop button click
        document.addEventListener('DOMContentLoaded', function() {
            const cropButton = document.getElementById('cropButton');
            
            if (cropButton) {
                cropButton.addEventListener('click', async function() {
                    console.log('Crop button clicked');
                    
                    if (!cropper || !currentFile || isProcessing) {
                        console.log('Cropper not ready or already processing');
                        return;
                    }
                    
                    isProcessing = true;
                    const button = this;
                    const text = document.getElementById('cropButtonText');
                    const spinner = document.getElementById('cropButtonSpinner');
                    
                    if (button && text && spinner) {
                        button.disabled = true;
                        text.classList.add('d-none');
                        spinner.classList.remove('d-none');
                    }
                    
                    try {
                        console.log('Getting cropped canvas');
                        const canvas = cropper.getCroppedCanvas({
                            maxWidth: 1200,
                            maxHeight: 1200,
                            fillColor: '#fff',
                            imageSmoothingEnabled: true,
                            imageSmoothingQuality: 'high'
                        });
                        
                        if (!canvas) {
                            throw new Error('Failed to create canvas from cropper');
                        }
                        
                        console.log('Canvas created successfully');
                        
                        // Convert canvas to blob using Promise
                        const blob = await canvasToBlob(canvas, currentFile.type, 0.9);
                        
                        console.log('Blob created successfully');
                        const croppedFile = new File([blob], currentFile.name, {
                            type: currentFile.type,
                            lastModified: Date.now()
                        });
                        
                        const preview = canvas.toDataURL(currentFile.type, 0.9);
                        
                        selectedFiles.push({
                            file: croppedFile,
                            preview: preview
                        });
                        
                        console.log('File added to selectedFiles');
                        updateThumbnails();
                        
                        if (cropModal) {
                            cropModal.hide();
                        }
                        
                        Swal.fire({
                            icon: 'success',
                            title: 'Image Added',
                            text: 'Image has been cropped and added successfully',
                            timer: 1500,
                            showConfirmButton: false
                        });
                        
                    } catch (error) {
                        console.error('Error cropping image:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Cropping Failed',
                            text: 'Failed to crop image: ' + error.message
                        });
                    } finally {
                        if (button && text && spinner) {
                            button.disabled = false;
                            text.classList.remove('d-none');
                            spinner.classList.add('d-none');
                        }
                        isProcessing = false;
                    }
                });
            }
        });

        // Helper function to convert canvas to blob with proper error handling
        function canvasToBlob(canvas, type, quality) {
            return new Promise((resolve, reject) => {
                try {
                    canvas.toBlob((blob) => {
                        if (blob) {
                            resolve(blob);
                        } else {
                            reject(new Error('Failed to create blob from canvas'));
                        }
                    }, type, quality);
                } catch (error) {
                    reject(error);
                }
            });
        }

        function updateThumbnails() {
            console.log('Updating thumbnails, count:', selectedFiles.length);
            
            const container = document.getElementById('thumbnailsContainer');
            if (!container) {
                console.error('Thumbnails container not found');
                return;
            }
            
            container.innerHTML = '';
            
            selectedFiles.forEach((item, index) => {
                const wrapper = document.createElement('div');
                wrapper.className = 'thumbnail-wrapper';
                
                const img = document.createElement('img');
                img.src = item.preview;
                img.className = 'thumbnail';
                img.alt = `Product image ${index + 1}`;
                
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'delete-btn';
                deleteBtn.innerHTML = 'Ã—';
                deleteBtn.type = 'button';
                deleteBtn.onclick = (e) => {
                    e.preventDefault();
                    deleteImage(index);
                };
                
                wrapper.appendChild(img);
                wrapper.appendChild(deleteBtn);
                container.appendChild(wrapper);
            });
            
            // Update hidden input
            const hiddenInput = document.getElementById('selectedImages');
            if (hiddenInput) {
                hiddenInput.value = JSON.stringify(
                    selectedFiles.map(item => item.file.name)
                );
            }
            
            // Update image count message
            const remainingImages = 4 - selectedFiles.length;
            const errorElement = document.getElementById('images-error');
            
            if (errorElement) {
                if (remainingImages > 0) {
                    errorElement.textContent = `You can upload ${remainingImages} more image${remainingImages > 1 ? 's' : ''}`;
                    errorElement.style.color = '#6c757d';
                    errorElement.style.display = 'block';
                } else {
                    errorElement.textContent = 'Maximum number of images reached';
                    errorElement.style.color = '#dc3545';
                    errorElement.style.display = 'block';
                }
            }
        }

        function deleteImage(index) {
            Swal.fire({
                title: 'Delete Image?',
                text: 'Are you sure you want to remove this image?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    selectedFiles.splice(index, 1);
                    updateThumbnails();
                    
                    Swal.fire({
                        title: 'Deleted!',
                        text: 'Image has been removed.',
                        icon: 'success',
                        timer: 1500,
                        showConfirmButton: false
                    });
                }
            });
        }

        function validateForm() {
            clearErrorMessages();
            let isValid = true;

            // Product Name Validation
            const nameInput = document.getElementsByName('productName')[0];
            const name = nameInput ? nameInput.value.trim() : '';
            if (name === '') {
                displayErrorMessage('productName-error', 'Product name is required');
                isValid = false;
            } else if (name.length < 3) {
                displayErrorMessage('productName-error', 'Product name must be at least 3 characters long');
                isValid = false;
            }

            // Description Validation
            const descriptionInput = document.getElementById('descriptionid');
            const description = descriptionInput ? descriptionInput.value.trim() : '';
            if (description === '') {
                displayErrorMessage('description-error', 'Product description is required');
                isValid = false;
            } else if (description.length < 20) {
                displayErrorMessage('description-error', 'Description must be at least 20 characters long');
                isValid = false;
            }

            // Price Validation
            const regularPriceInput = document.getElementsByName('regularPrice')[0];
            const regularPrice = regularPriceInput ? parseFloat(regularPriceInput.value) : 0;

            if (!regularPrice || regularPrice <= 0) {
                displayErrorMessage('regularPrice-error', 'Regular price must be greater than 0');
                isValid = false;
            }

            // Sale Price Validation (optional field)
            const salePriceInput = document.getElementsByName('salePrice')[0];
            const salePrice = salePriceInput ? salePriceInput.value.trim() : '';
            
            if (salePrice !== '') {
                const salePriceNum = parseFloat(salePrice);
                if (isNaN(salePriceNum) || salePriceNum <= 0) {
                    displayErrorMessage('salePrice-error', 'Sale price must be greater than 0');
                    isValid = false;
                } else if (salePriceNum >= regularPrice) {
                    displayErrorMessage('salePrice-error', 'Sale price must be less than regular price');
                    isValid = false;
                }
            }

            // Quantity Validation
            const quantityInput = document.getElementsByName('quantity')[0];
            const quantity = quantityInput ? parseInt(quantityInput.value) : -1;
            if (isNaN(quantity) || quantity < 0) {
                displayErrorMessage('quantity-error', 'Quantity must be 0 or greater');
                isValid = false;
            }

            // Brand Validation
            const brandInput = document.getElementsByName('brand')[0];
            const brand = brandInput ? brandInput.value : '';
            if (!brand) {
                displayErrorMessage('brand-error', 'Please select a brand');
                isValid = false;
            }

            // Category Validation
            const categoryInput = document.getElementsByName('category')[0];
            const category = categoryInput ? categoryInput.value : '';
            if (!category) {
                displayErrorMessage('category-error', 'Please select a category');
                isValid = false;
            }

            // Image Validation
            if (selectedFiles.length < 1) {
                displayErrorMessage('images-error', 'Please upload at least 1 image');
                isValid = false;
            }

            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (errorElement) {
                errorElement.textContent = message;
                errorElement.style.display = 'block';
                errorElement.style.color = '#dc3545';
            }
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName('error-message');
            Array.from(errorElements).forEach(element => {
                element.textContent = '';
                element.style.display = 'none';
            });
        }

        async function handleFormSubmit(event) {
            event.preventDefault();
            console.log('Form submit triggered');
            
            if (!validateForm()) {
                console.log('Form validation failed');
                return false;
            }

            if (selectedFiles.length === 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Images Required',
                    text: 'Please select at least one product image',
                    confirmButtonColor: '#dc3545'
                });
                return false;
            }

            // Show loading state
            const submitBtn = event.target.querySelector('button[type="submit"]');
            const submitText = document.getElementById('submitText');
            const submitSpinner = document.getElementById('submitSpinner');
            
            if (submitBtn && submitText && submitSpinner) {
                submitBtn.disabled = true;
                submitText.textContent = 'Publishing...';
                submitSpinner.classList.remove('d-none');
            }

            try {
                const formData = new FormData(event.target);
                
                // Remove any existing files
                formData.delete('images');
                
                // Add each selected file
                selectedFiles.forEach((item, index) => {
                    formData.append('images', item.file, `product_image_${index}_${Date.now()}.${item.file.type.split('/')[1]}`);
                });

                // Ensure salePrice is set
                if (!formData.get('salePrice') || formData.get('salePrice').trim() === '') {
                    formData.set('salePrice', formData.get('regularPrice'));
                }

                console.log('Submitting form data');
                const response = await fetch('/admin/addProducts', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || `HTTP error! status: ${response.status}`);
                }

                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Product added successfully',
                        confirmButtonColor: '#28a745'
                    });
                    window.location.href = '/admin/products';
                } else {
                    throw new Error(data.error || 'Unknown error occurred');
                }

            } catch (error) {
                console.error('Error submitting form:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Something went wrong! Please try again.',
                    confirmButtonColor: '#dc3545'
                });
            } finally {
                // Reset button state
                if (submitBtn && submitText && submitSpinner) {
                    submitBtn.disabled = false;
                    submitText.textContent = 'Publish Product';
                    submitSpinner.classList.add('d-none');
                }
            }

            return false;
        }

        // Prevent form submission on Enter key in input fields
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Enter' && event.target.tagName !== 'TEXTAREA' && event.target.tagName !== 'BUTTON') {
                event.preventDefault();
            }
        });
    </script>
</body>
</html>
    <%- include("../../views/partials/admin/footer") %>